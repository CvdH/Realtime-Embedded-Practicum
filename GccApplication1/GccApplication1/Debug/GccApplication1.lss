
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d97  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6a  00000000  00000000  00001063  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  00001ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bf  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012b  00000000  00000000  000026bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000027ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	8f c0       	rjmp	.+286    	; 0x184 <__vector_25>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	1b d0       	rcall	.+54     	; 0x13c <main>
 106:	51 c0       	rjmp	.+162    	; 0x1aa <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <initUSART>:
uint8_t data = 0;

void initUSART(uint16_t ubbr)
{
	//set prescalar/baudrate
	UBRR0H = (uint8_t) (ubbr >> 8);
 10a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (uint8_t) ubbr;
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	//enable receiver and transmitter and enable interrupt
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 112:	88 e9       	ldi	r24, 0x98	; 152
 114:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
	//set frame format
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 118:	8e e0       	ldi	r24, 0x0E	; 14
 11a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 11e:	08 95       	ret

00000120 <wait>:
		wait(delay);
	}
}

void wait(unsigned a) {
	while(a--)
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	59 f0       	breq	.+22     	; 0x13a <wait+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	31 ee       	ldi	r19, 0xE1	; 225
 128:	44 e0       	ldi	r20, 0x04	; 4
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	30 40       	sbci	r19, 0x00	; 0
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <wait+0xa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <wait+0x14>
 134:	00 00       	nop
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	a9 f7       	brne	.-22     	; 0x124 <wait+0x4>
 13a:	08 95       	ret

0000013c <main>:
	return UDR0;
}
*/

int main() {
	sei();
 13c:	78 94       	sei
	initUSART(MYUBBR);
 13e:	87 e6       	ldi	r24, 0x67	; 103
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	e3 df       	rcall	.-58     	; 0x10a <initUSART>
	uint8_t delay = 0;
	//set pin7 to output
	DDRB = (1 << PB7);
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	84 b9       	out	0x04, r24	; 4
*/

int main() {
	sei();
	initUSART(MYUBBR);
	uint8_t delay = 0;
 148:	c0 e0       	ldi	r28, 0x00	; 0
		if (received)
		{
			switch (data)
			{
				case '1': delay = 10; break;
				case '2': delay = 5; break;
 14a:	05 e0       	ldi	r16, 0x05	; 5
				case '3': delay = 1; break;
 14c:	11 e0       	ldi	r17, 0x01	; 1
	{
		if (received)
		{
			switch (data)
			{
				case '1': delay = 10; break;
 14e:	da e0       	ldi	r29, 0x0A	; 10
	//set pin7 to output
	DDRB = (1 << PB7);

	while (1)
	{
		if (received)
 150:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <received>
 154:	88 23       	and	r24, r24
 156:	79 f0       	breq	.+30     	; 0x176 <main+0x3a>
		{
			switch (data)
 158:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
 15c:	82 33       	cpi	r24, 0x32	; 50
 15e:	31 f0       	breq	.+12     	; 0x16c <main+0x30>
 160:	83 33       	cpi	r24, 0x33	; 51
 162:	31 f0       	breq	.+12     	; 0x170 <main+0x34>
 164:	81 33       	cpi	r24, 0x31	; 49
 166:	29 f4       	brne	.+10     	; 0x172 <main+0x36>
			{
				case '1': delay = 10; break;
 168:	cd 2f       	mov	r28, r29
 16a:	03 c0       	rjmp	.+6      	; 0x172 <main+0x36>
				case '2': delay = 5; break;
 16c:	c0 2f       	mov	r28, r16
 16e:	01 c0       	rjmp	.+2      	; 0x172 <main+0x36>
				case '3': delay = 1; break;
 170:	c1 2f       	mov	r28, r17
			}
			received = false;
 172:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <received>
		}
		
		PORTB ^= (1 << PB7);
 176:	85 b1       	in	r24, 0x05	; 5
 178:	80 58       	subi	r24, 0x80	; 128
 17a:	85 b9       	out	0x05, r24	; 5
		wait(delay);
 17c:	8c 2f       	mov	r24, r28
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	cf df       	rcall	.-98     	; 0x120 <wait>
	}
 182:	e6 cf       	rjmp	.-52     	; 0x150 <main+0x14>

00000184 <__vector_25>:
	while(a--)
	_delay_ms(100);
}

ISR(USART0_RX_vect)
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	8f 93       	push	r24
	data = UDR0;
 190:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 194:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	received = true;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <received>
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
