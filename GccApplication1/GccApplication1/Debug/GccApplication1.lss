
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  00000484  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800238  00800238  00000550  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a6  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cfd  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055f  00000000  00000000  000023db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  0000293c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000564  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000036c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	d3 c1       	rjmp	.+934    	; 0x3d8 <__vector_12>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c1       	rjmp	.+690    	; 0x2f8 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	8f c1       	rjmp	.+798    	; 0x384 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e8       	ldi	r30, 0x84	; 132
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 34       	cpi	r26, 0x44	; 68
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	11 d1       	rcall	.+546    	; 0x342 <main>
 120:	af c1       	rjmp	.+862    	; 0x480 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <turnServo>:

	}
}

void wait(unsigned a) {
	while(a--)
 124:	40 eb       	ldi	r20, 0xB0	; 176
 126:	54 e0       	ldi	r21, 0x04	; 4
 128:	84 9f       	mul	r24, r20
 12a:	90 01       	movw	r18, r0
 12c:	85 9f       	mul	r24, r21
 12e:	30 0d       	add	r19, r0
 130:	94 9f       	mul	r25, r20
 132:	30 0d       	add	r19, r0
 134:	11 24       	eor	r1, r1
 136:	a3 e8       	ldi	r26, 0x83	; 131
 138:	bd e2       	ldi	r27, 0x2D	; 45
 13a:	93 d1       	rcall	.+806    	; 0x462 <__umulhisi3>
 13c:	9c 01       	movw	r18, r24
 13e:	36 95       	lsr	r19
 140:	27 95       	ror	r18
 142:	32 95       	swap	r19
 144:	22 95       	swap	r18
 146:	2f 70       	andi	r18, 0x0F	; 15
 148:	23 27       	eor	r18, r19
 14a:	3f 70       	andi	r19, 0x0F	; 15
 14c:	23 27       	eor	r18, r19
 14e:	8c e9       	ldi	r24, 0x9C	; 156
 150:	9a e4       	ldi	r25, 0x4A	; 74
 152:	82 1b       	sub	r24, r18
 154:	93 0b       	sbc	r25, r19
 156:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 15a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 15e:	08 95       	ret

00000160 <usart_transmit>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	66 23       	and	r22, r22
 166:	a1 f0       	breq	.+40     	; 0x190 <usart_transmit+0x30>
 168:	dc 01       	movw	r26, r24
 16a:	61 50       	subi	r22, 0x01	; 1
 16c:	26 2f       	mov	r18, r22
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	3f 4f       	sbci	r19, 0xFF	; 255
 174:	28 0f       	add	r18, r24
 176:	39 1f       	adc	r19, r25
 178:	e0 ec       	ldi	r30, 0xC0	; 192
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	c6 ec       	ldi	r28, 0xC6	; 198
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	90 81       	ld	r25, Z
 182:	95 ff       	sbrs	r25, 5
 184:	fd cf       	rjmp	.-6      	; 0x180 <usart_transmit+0x20>
 186:	9d 91       	ld	r25, X+
 188:	98 83       	st	Y, r25
 18a:	a2 17       	cp	r26, r18
 18c:	b3 07       	cpc	r27, r19
 18e:	c1 f7       	brne	.-16     	; 0x180 <usart_transmit+0x20>
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <parseBuffer>:
 196:	cf 92       	push	r12
 198:	df 92       	push	r13
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
 1a8:	6a 97       	sbiw	r28, 0x1a	; 26
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	8c 01       	movw	r16, r24
 1b6:	f6 2e       	mov	r15, r22
 1b8:	66 23       	and	r22, r22
 1ba:	29 f1       	breq	.+74     	; 0x206 <parseBuffer+0x70>
 1bc:	86 2f       	mov	r24, r22
 1be:	e0 e0       	ldi	r30, 0x00	; 0
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	c6 2e       	mov	r12, r22
 1c4:	d1 2c       	mov	r13, r1
 1c6:	68 2f       	mov	r22, r24
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	96 01       	movw	r18, r12
 1cc:	26 1b       	sub	r18, r22
 1ce:	37 0b       	sbc	r19, r23
 1d0:	20 0f       	add	r18, r16
 1d2:	31 1f       	adc	r19, r17
 1d4:	d9 01       	movw	r26, r18
 1d6:	9c 91       	ld	r25, X
 1d8:	90 53       	subi	r25, 0x30	; 48
 1da:	61 50       	subi	r22, 0x01	; 1
 1dc:	71 09       	sbc	r23, r1
 1de:	16 16       	cp	r1, r22
 1e0:	17 06       	cpc	r1, r23
 1e2:	64 f4       	brge	.+24     	; 0x1fc <parseBuffer+0x66>
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	99 0f       	add	r25, r25
 1e8:	39 2f       	mov	r19, r25
 1ea:	33 0f       	add	r19, r19
 1ec:	33 0f       	add	r19, r19
 1ee:	93 0f       	add	r25, r19
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	42 2f       	mov	r20, r18
 1f4:	50 e0       	ldi	r21, 0x00	; 0
 1f6:	46 17       	cp	r20, r22
 1f8:	57 07       	cpc	r21, r23
 1fa:	ac f3       	brlt	.-22     	; 0x1e6 <parseBuffer+0x50>
 1fc:	e9 0f       	add	r30, r25
 1fe:	f1 1d       	adc	r31, r1
 200:	81 50       	subi	r24, 0x01	; 1
 202:	09 f7       	brne	.-62     	; 0x1c6 <parseBuffer+0x30>
 204:	02 c0       	rjmp	.+4      	; 0x20a <parseBuffer+0x74>
 206:	e0 e0       	ldi	r30, 0x00	; 0
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	cf 01       	movw	r24, r30
 20c:	8b df       	rcall	.-234    	; 0x124 <turnServo>
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	e0 e0       	ldi	r30, 0x00	; 0
 212:	f2 e0       	ldi	r31, 0x02	; 2
 214:	de 01       	movw	r26, r28
 216:	11 96       	adiw	r26, 0x01	; 1
 218:	01 90       	ld	r0, Z+
 21a:	0d 92       	st	X+, r0
 21c:	8a 95       	dec	r24
 21e:	e1 f7       	brne	.-8      	; 0x218 <parseBuffer+0x82>
 220:	6f e0       	ldi	r22, 0x0F	; 15
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	9c df       	rcall	.-200    	; 0x160 <usart_transmit>
 228:	6f 2d       	mov	r22, r15
 22a:	c8 01       	movw	r24, r16
 22c:	99 df       	rcall	.-206    	; 0x160 <usart_transmit>
 22e:	8b e0       	ldi	r24, 0x0B	; 11
 230:	ef e0       	ldi	r30, 0x0F	; 15
 232:	f2 e0       	ldi	r31, 0x02	; 2
 234:	de 01       	movw	r26, r28
 236:	50 96       	adiw	r26, 0x10	; 16
 238:	01 90       	ld	r0, Z+
 23a:	0d 92       	st	X+, r0
 23c:	8a 95       	dec	r24
 23e:	e1 f7       	brne	.-8      	; 0x238 <parseBuffer+0xa2>
 240:	6b e0       	ldi	r22, 0x0B	; 11
 242:	ce 01       	movw	r24, r28
 244:	40 96       	adiw	r24, 0x10	; 16
 246:	8c df       	rcall	.-232    	; 0x160 <usart_transmit>
 248:	6a 96       	adiw	r28, 0x1a	; 26
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	df 90       	pop	r13
 260:	cf 90       	pop	r12
 262:	08 95       	ret

00000264 <addToRxBuffer>:
 264:	8a 30       	cpi	r24, 0x0A	; 10
 266:	51 f4       	brne	.+20     	; 0x27c <addToRxBuffer+0x18>
 268:	60 91 42 02 	lds	r22, 0x0242	; 0x800242 <rxBufferIndex.1771>
 26c:	88 e3       	ldi	r24, 0x38	; 56
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	92 df       	rcall	.-220    	; 0x196 <parseBuffer>
 272:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <rxBufferIndex.1771+0x1>
 276:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <rxBufferIndex.1771>
 27a:	08 95       	ret
 27c:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <rxBufferIndex.1771>
 280:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <rxBufferIndex.1771+0x1>
 284:	2a 30       	cpi	r18, 0x0A	; 10
 286:	31 05       	cpc	r19, r1
 288:	5c f4       	brge	.+22     	; 0x2a0 <addToRxBuffer+0x3c>
 28a:	a9 01       	movw	r20, r18
 28c:	4f 5f       	subi	r20, 0xFF	; 255
 28e:	5f 4f       	sbci	r21, 0xFF	; 255
 290:	50 93 43 02 	sts	0x0243, r21	; 0x800243 <rxBufferIndex.1771+0x1>
 294:	40 93 42 02 	sts	0x0242, r20	; 0x800242 <rxBufferIndex.1771>
 298:	f9 01       	movw	r30, r18
 29a:	e8 5c       	subi	r30, 0xC8	; 200
 29c:	fd 4f       	sbci	r31, 0xFD	; 253
 29e:	80 83       	st	Z, r24
 2a0:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <rxBufferIndex.1771>
 2a4:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <rxBufferIndex.1771+0x1>
 2a8:	0a 97       	sbiw	r24, 0x0a	; 10
 2aa:	41 f4       	brne	.+16     	; 0x2bc <addToRxBuffer+0x58>
 2ac:	6a e0       	ldi	r22, 0x0A	; 10
 2ae:	88 e3       	ldi	r24, 0x38	; 56
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	71 df       	rcall	.-286    	; 0x196 <parseBuffer>
 2b4:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <rxBufferIndex.1771+0x1>
 2b8:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <rxBufferIndex.1771>
 2bc:	08 95       	ret

000002be <timer1_init>:
 2be:	e0 e8       	ldi	r30, 0x80	; 128
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	80 83       	st	Z, r24
 2c8:	e1 e8       	ldi	r30, 0x81	; 129
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	80 81       	ld	r24, Z
 2ce:	82 61       	ori	r24, 0x12	; 18
 2d0:	80 83       	st	Z, r24
 2d2:	80 e2       	ldi	r24, 0x20	; 32
 2d4:	9e e4       	ldi	r25, 0x4E	; 78
 2d6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 2da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 2de:	84 e4       	ldi	r24, 0x44	; 68
 2e0:	98 e4       	ldi	r25, 0x48	; 72
 2e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 2e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 2ea:	ef e6       	ldi	r30, 0x6F	; 111
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	80 83       	st	Z, r24
 2f4:	78 94       	sei
 2f6:	08 95       	ret

000002f8 <__vector_17>:
 2f8:	1f 92       	push	r1
 2fa:	0f 92       	push	r0
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	0f 92       	push	r0
 300:	11 24       	eor	r1, r1
 302:	8f 93       	push	r24
 304:	82 b1       	in	r24, 0x02	; 2
 306:	80 58       	subi	r24, 0x80	; 128
 308:	82 b9       	out	0x02, r24	; 2
 30a:	8f 91       	pop	r24
 30c:	0f 90       	pop	r0
 30e:	0f be       	out	0x3f, r0	; 63
 310:	0f 90       	pop	r0
 312:	1f 90       	pop	r1
 314:	18 95       	reti

00000316 <initUSART>:
 316:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 31a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 31e:	88 e9       	ldi	r24, 0x98	; 152
 320:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
 324:	8e e0       	ldi	r24, 0x0E	; 14
 326:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 32a:	08 95       	ret

0000032c <initWatchDog>:
 32c:	f8 94       	cli
 32e:	a8 95       	wdr
 330:	e0 e6       	ldi	r30, 0x60	; 96
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	88 61       	ori	r24, 0x18	; 24
 338:	80 83       	st	Z, r24
 33a:	89 e6       	ldi	r24, 0x69	; 105
 33c:	80 83       	st	Z, r24
 33e:	78 94       	sei
 340:	08 95       	ret

00000342 <main>:
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	29 97       	sbiw	r28, 0x09	; 9
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
 356:	78 94       	sei
 358:	87 e6       	ldi	r24, 0x67	; 103
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	dc df       	rcall	.-72     	; 0x316 <initUSART>
 35e:	89 e0       	ldi	r24, 0x09	; 9
 360:	ea e1       	ldi	r30, 0x1A	; 26
 362:	f2 e0       	ldi	r31, 0x02	; 2
 364:	de 01       	movw	r26, r28
 366:	11 96       	adiw	r26, 0x01	; 1
 368:	01 90       	ld	r0, Z+
 36a:	0d 92       	st	X+, r0
 36c:	8a 95       	dec	r24
 36e:	e1 f7       	brne	.-8      	; 0x368 <main+0x26>
 370:	69 e0       	ldi	r22, 0x09	; 9
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	f4 de       	rcall	.-536    	; 0x160 <usart_transmit>
 378:	d9 df       	rcall	.-78     	; 0x32c <initWatchDog>
 37a:	a1 df       	rcall	.-190    	; 0x2be <timer1_init>
 37c:	80 e8       	ldi	r24, 0x80	; 128
 37e:	84 b9       	out	0x04, r24	; 4
 380:	81 b9       	out	0x01, r24	; 1
 382:	ff cf       	rjmp	.-2      	; 0x382 <main+0x40>

00000384 <__vector_25>:
	_delay_ms(100);
}

ISR(USART0_RX_vect)
{
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	0b b6       	in	r0, 0x3b	; 59
 390:	0f 92       	push	r0
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	wdt_reset();
 3aa:	a8 95       	wdr
	addToRxBuffer(UDR0);
 3ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3b0:	59 df       	rcall	.-334    	; 0x264 <addToRxBuffer>
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0b be       	out	0x3b, r0	; 59
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <__vector_12>:

ISR(WDT_vect)
{
 3d8:	1f 92       	push	r1
 3da:	0f 92       	push	r0
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	0f 92       	push	r0
 3e0:	11 24       	eor	r1, r1
 3e2:	0b b6       	in	r0, 0x3b	; 59
 3e4:	0f 92       	push	r0
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	4f 93       	push	r20
 3ec:	5f 93       	push	r21
 3ee:	6f 93       	push	r22
 3f0:	7f 93       	push	r23
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	65 97       	sbiw	r28, 0x15	; 21
 408:	de bf       	out	0x3e, r29	; 62
 40a:	cd bf       	out	0x3d, r28	; 61
	turnServo(90);
 40c:	8a e5       	ldi	r24, 0x5A	; 90
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	89 de       	rcall	.-750    	; 0x124 <turnServo>
	uint8_t message[21] = "Servo to save state\n";
 412:	85 e1       	ldi	r24, 0x15	; 21
 414:	e3 e2       	ldi	r30, 0x23	; 35
 416:	f2 e0       	ldi	r31, 0x02	; 2
 418:	de 01       	movw	r26, r28
 41a:	11 96       	adiw	r26, 0x01	; 1
 41c:	01 90       	ld	r0, Z+
 41e:	0d 92       	st	X+, r0
 420:	8a 95       	dec	r24
 422:	e1 f7       	brne	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	usart_transmit(message, 20);
 424:	64 e1       	ldi	r22, 0x14	; 20
 426:	ce 01       	movw	r24, r28
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	9a de       	rcall	.-716    	; 0x160 <usart_transmit>
}
 42c:	65 96       	adiw	r28, 0x15	; 21
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	f8 94       	cli
 432:	de bf       	out	0x3e, r29	; 62
 434:	0f be       	out	0x3f, r0	; 63
 436:	cd bf       	out	0x3d, r28	; 61
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	ff 91       	pop	r31
 43e:	ef 91       	pop	r30
 440:	bf 91       	pop	r27
 442:	af 91       	pop	r26
 444:	9f 91       	pop	r25
 446:	8f 91       	pop	r24
 448:	7f 91       	pop	r23
 44a:	6f 91       	pop	r22
 44c:	5f 91       	pop	r21
 44e:	4f 91       	pop	r20
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0b be       	out	0x3b, r0	; 59
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <__umulhisi3>:
 462:	a2 9f       	mul	r26, r18
 464:	b0 01       	movw	r22, r0
 466:	b3 9f       	mul	r27, r19
 468:	c0 01       	movw	r24, r0
 46a:	a3 9f       	mul	r26, r19
 46c:	70 0d       	add	r23, r0
 46e:	81 1d       	adc	r24, r1
 470:	11 24       	eor	r1, r1
 472:	91 1d       	adc	r25, r1
 474:	b2 9f       	mul	r27, r18
 476:	70 0d       	add	r23, r0
 478:	81 1d       	adc	r24, r1
 47a:	11 24       	eor	r1, r1
 47c:	91 1d       	adc	r25, r1
 47e:	08 95       	ret

00000480 <_exit>:
 480:	f8 94       	cli

00000482 <__stop_program>:
 482:	ff cf       	rjmp	.-2      	; 0x482 <__stop_program>
