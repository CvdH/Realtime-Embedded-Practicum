
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800200  00800200  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e46  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc1  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041d  00000000  00000000  00001e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e9  00000000  00000000  000022d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000175  00000000  00000000  000028c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	7f c0       	rjmp	.+254    	; 0x144 <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	a6 c0       	rjmp	.+332    	; 0x1b2 <__vector_25>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a2 30       	cpi	r26, 0x02	; 2
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	3c d0       	rcall	.+120    	; 0x17e <main>
 106:	68 c0       	rjmp	.+208    	; 0x1d8 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <timer1_init>:
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
}

void turnServo(uint16_t degrees)
{	
	 OCR1A = 20000 - ((degrees * 1200 / 180) + 900);
 10a:	e0 e8       	ldi	r30, 0x80	; 128
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	82 60       	ori	r24, 0x02	; 2
 112:	80 83       	st	Z, r24
 114:	e1 e8       	ldi	r30, 0x81	; 129
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 61       	ori	r24, 0x12	; 18
 11c:	80 83       	st	Z, r24
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	9e e4       	ldi	r25, 0x4E	; 78
 122:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 126:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
 12a:	84 e4       	ldi	r24, 0x44	; 68
 12c:	98 e4       	ldi	r25, 0x48	; 72
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 136:	ef e6       	ldi	r30, 0x6F	; 111
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	82 60       	ori	r24, 0x02	; 2
 13e:	80 83       	st	Z, r24
 140:	78 94       	sei
 142:	08 95       	ret

00000144 <__vector_17>:
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	85 b1       	in	r24, 0x05	; 5
 152:	80 58       	subi	r24, 0x80	; 128
 154:	85 b9       	out	0x05, r24	; 5
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <wait>:
*/
	}
}

void wait(unsigned a) {
	while(a--)
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	59 f0       	breq	.+22     	; 0x17c <wait+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	31 ee       	ldi	r19, 0xE1	; 225
 16a:	44 e0       	ldi	r20, 0x04	; 4
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	30 40       	sbci	r19, 0x00	; 0
 170:	40 40       	sbci	r20, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <wait+0xa>
 174:	00 c0       	rjmp	.+0      	; 0x176 <wait+0x14>
 176:	00 00       	nop
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	a9 f7       	brne	.-22     	; 0x166 <wait+0x4>
 17c:	08 95       	ret

0000017e <main>:


int main() {
	sei();
	//initUSART(MYUBBR);
	timer1_init();
 17e:	78 94       	sei
	uint8_t delay = 0;
	//set pin7 to output
	DDRB = (1 << PB7);	
 180:	c4 df       	rcall	.-120    	; 0x10a <timer1_init>
 182:	80 e8       	ldi	r24, 0x80	; 128
	DDRA = (1 << PA7);
 184:	84 b9       	out	0x04, r24	; 4
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
}

void turnServo(uint16_t degrees)
{	
	 OCR1A = 20000 - ((degrees * 1200 / 180) + 900);
 186:	81 b9       	out	0x01, r24	; 1
 188:	c8 e8       	ldi	r28, 0x88	; 136
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	0f 2e       	mov	r0, r31
 18e:	f1 eb       	ldi	r31, 0xB1	; 177
 190:	ef 2e       	mov	r14, r31
 192:	f9 e4       	ldi	r31, 0x49	; 73
 194:	ff 2e       	mov	r15, r31
 196:	f0 2d       	mov	r31, r0
 198:	05 e5       	ldi	r16, 0x55	; 85
 19a:	1a e4       	ldi	r17, 0x4A	; 74
 19c:	f9 82       	std	Y+1, r15	; 0x01
	DDRA = (1 << PA7);

	while (1)
	{
		turnServo(90);
		wait(10);
 19e:	e8 82       	st	Y, r14
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	90 e0       	ldi	r25, 0x00	; 0
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
}

void turnServo(uint16_t degrees)
{	
	 OCR1A = 20000 - ((degrees * 1200 / 180) + 900);
 1a4:	de df       	rcall	.-68     	; 0x162 <wait>
	while (1)
	{
		turnServo(90);
		wait(10);
		turnServo(120);
		wait(10);
 1a6:	19 83       	std	Y+1, r17	; 0x01
 1a8:	08 83       	st	Y, r16
 1aa:	8a e0       	ldi	r24, 0x0A	; 10
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	d9 df       	rcall	.-78     	; 0x162 <wait>
 1b0:	f5 cf       	rjmp	.-22     	; 0x19c <main+0x1e>

000001b2 <__vector_25>:
	while(a--)
	_delay_ms(100);
}

ISR(USART0_RX_vect)
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
	data = UDR0;
 1be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1c2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_edata>
	received = true;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <received>
}
 1cc:	8f 91       	pop	r24
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
